/**
 * Mule Cassandra Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.mulesoft.mule.cassandradb;

import org.mule.api.MuleEvent;
import org.mule.construct.Flow;


import org.junit.Test;
import org.mule.tck.junit4.FunctionalTestCase;

import java.util.*;

import static junit.framework.Assert.*;
import static junit.framework.Assert.assertEquals;

public class CassandraDBConnectorTest extends FunctionalTestCase
{
    static final String jsonString = "{\"ToyStores\" : {\"Ohio Store\" : {\"Transformer\" : {\"Price\" : 29.99,\"Section\" : \"Action Figures\"},\"GumDrop\" : {\"Price\" : 0.25,\"Section\" : \"Candy\"},\"MatchboxCar\" : {\"Price\" : 1.49,\"Section\" : \"Vehicles\"}},\"New York Store\" : {\"JawBreaker\" : {\"Price\" : 4.25,\"Section\" : \"Candy\"},\"MatchboxCar\" : {\"Price\" : 8.79,\"Section\" : \"Vehicles\"}}}}";

    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }

    @Test
    public void testFlow() throws Exception
    {
        runFlowWithPayload("testFlow", jsonString);        
    }



    @Test
    @SuppressWarnings({"unchecked"})
    public void testGetDataFlow() throws Exception
    {
        Map superColumnNode  = new HashMap();
        Map columnNode = new HashMap();
        columnNode.put("Price", 29.99);
        columnNode.put("Section", "Action Figures");
        superColumnNode.put("Transformer", columnNode);

        assertEquals(superColumnNode,
                runFlowWithPayload("testGetDataFlow", "Ohio Store").getMessage().getPayload());
    }

    @Test
    @SuppressWarnings({"unchecked"})
    public void testCanGetSlice() throws Exception
    {

        // [{JawBreaker={Section=Candy, Price=4.25}}, {MatchboxCar={Section=Vehicles, Price=8.79}}]
        Map column1 = new HashMap();
        column1.put("Price", 4.25);
        column1.put("Section", "Candy");

        Map column2 = new HashMap();
        column2.put("Price", 8.79);
        column2.put("Section", "Vehicles");

        Map result1 = new HashMap();
        result1.put("JawBreaker", column1);

        Map result2 = new HashMap();
        result2.put("MatchboxCar", column2);

        List results = new ArrayList();
        results.add(result1);
        results.add(result2);


        assertEquals(results,
                runFlowWithPayload("testGetSlice", "New York Store").getMessage().getPayload());
    }

    @Test
    public void testCanRemoveRow() throws Exception {

        assertEquals(2,
                ((List) runFlowWithPayload("testGetSlice", "New York Store").getMessage().getPayload()).size());
        assertNotNull( runFlowWithPayload("testRemoveRow", "New York Store"));
        assertEquals(0,
                ((List) runFlowWithPayload("testGetSlice", "New York Store").getMessage().getPayload()).size());
    }


    /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = FunctionalTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }
    /**
    * Run the flow specified by name using the specified payload 
    *
    * @param flowName The name of the flow to run
    * @param payload The payload of the input event
    */
    protected <U> MuleEvent runFlowWithPayload(String flowName, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = FunctionalTestCase.getTestEvent(payload);
        return flow.process(event);
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) FunctionalTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
